"""
Language building blocks (German/English) for outputs.

Includes:
- Headings (Terminal, TXT, CSV)
- Field names per language
- Field order
- Simple word lists for standardization (e.g., colors, materials)
- Helper functions for display, e.g., classifications

Goal: Consistent, factual wording in both languages.
"""

import re

HEADINGS = {
    "en": {
        "record": "——— Record {i}/{n} ———",
        "objnum": "Object number",
        "classif": "Classification",
        "images_used": "Images used",
        "confidence": "Confidence",
        "gen_by": "Generated by",
        "desc": "Description",
        "matched": "Matched {files} file(s) across {objs} object(s).",
        "done": "Done.",
        "csv_saved": "CSV (long):       {p}",
        "txt_saved": "Text descriptions: {p}",
        "copied": "Images copied to: {p}",
    },
    "de": {
        "record": "——— Datensatz {i}/{n} ———",
        "objnum": "Objektnummer",
        "classif": "Klassifikation",
        "images_used": "Verwendete Bilder",
        "confidence": "Sicherheit",
        "gen_by": "Erstellt von",
        "desc": "Beschreibung",
        "matched": "{files} Datei(en) über {objs} Objekt(e) gefunden.",
        "done": "Fertig.",
        "csv_saved": "CSV (long):       {p}",
        "txt_saved": "Text-Beschreibungen: {p}",
        "copied": "Bilder kopiert nach: {p}",
    }
}

FIELD_LABELS = {
    "en": {
        "brand_logo": "Brand/logo",
        "keyboard_type": "Keyboard",
        "housing_material": "Housing material",
        "color": "Color",
        "form": "Form",
        "mechanism": "Mechanism",
        "form_factor": "Form factor",
        "controls": "Controls",
        "connectors": "Connectors",
        "labels_or_scales": "Labels/scales",
        "material_specific": "Material (specific)",
    },
    "de": {
        "brand_logo": "Marke/Logo",
        "keyboard_type": "Tastatur",
        "housing_material": "Gehäusematerial",
        "color": "Farbe",
        "form": "Form",
        "mechanism": "Mechanik",
        "form_factor": "Bauform",
        "controls": "Bedienelemente",
        "connectors": "Anschlüsse",
        "labels_or_scales": "Beschriftungen/Skalen",
        "material_specific": "Material (spezifisch)",
    }
}

FIELD_ORDER = [
    "brand_logo",
    "keyboard_type",
    "housing_material",
    "color",
    "form",
    "mechanism",
    "form_factor",
    "controls",
    "connectors",
    "labels_or_scales",
    "material_specific",
]

DE_VALUE_MAP = [
    (r"\bTYPEWRITER\b", "Schreibmaschine"),
    (r"\bCOMMUNICATION TOOL\b", "Kommunikationsgerät"),
    (r"\(probably\)", "(wahrscheinlich)"),
    (r"\bmetal\b", "Metall"),
    (r"\bplastic\b", "Kunststoff"),
    (r"\bwood\b", "Holz"),
    (r"\bbakelit\b", "Bakelit"),
    (r"\blight gray\b", "hellgrau"),
    (r"\bdark gray\b", "dunkelgrau"),
    (r"\bgray\b", "grau"),
    (r"\bblack\b", "schwarz"),
    (r"\bwhite\b", "weiß"),
    (r"\bred\b", "rot"),
    (r"\bblue\b", "blau"),
    (r"\bgreen\b", "grün"),
    (r"\bbeige\b", "beige"),
    (r"\brectangular\b", "rechteckig"),
    (r"\bboxy\b", "kastenförmig"),
    (r"\bstandard\b", "Standardform"),
    (r"\benclosed\b", "geschlossen"),
    (r"\bopen\b", "offen"),
    (r"\bmechanical\b", "mechanisch"),
    (r"\brotary\b", "rotierend"),
    (r"\bdesktop\b", "Tischgerät"),
    (r"\brotary dial\b", "Wählscheibe"),
    (r"\bcontrol knobs\b", "Drehknöpfe"),
    (r"\bcoiled telephone (cord|cable)\b", "Spiral-Telefonkabel"),
    (r"\bnumbered dial\b", "Nummernskala"),
]

def de_localize_value(text: str) -> str:
    if not isinstance(text, str) or not text.strip():
        return text
    s = text
    for pat, repl in DE_VALUE_MAP:
        s = re.sub(pat, repl, s, flags=re.IGNORECASE)
    return s

def localize_classification_for_display(cls: str, lang: str) -> str:
    if not isinstance(cls, str):
        return cls
    if lang == "de":
        out = cls
        out = re.sub(r"\bTYPEWRITER\b", "Schreibmaschine", out, flags=re.I)
        out = re.sub(r"\bCOMMUNICATION TOOL\b", "Kommunikationsgerät", out, flags=re.I)
        out = out.replace(" (probably)", " (wahrscheinlich)")
        return out
    return cls
